{
  "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "templateBaseUrl": {
        "type": "string",
        "metadata": {
            "description": "The base url for templates"
        }
    },
    "esSettings": {
        "type": "object",
        "metadata": {
            "description" : "The Elasticsearch settings"
        }
    },
    "commonVmSettings": {
        "type": "object",
        "metadata": {
            "description" : "Shared VM settings"
        }
    },
    "topologySettings": {
        "type": "object",
        "metadata": {
            "description": "Aggregate for topology variable"
        }
    },
    "networkSettings": {
      "type": "object",
      "metadata": {
        "description": "Network settings"
      }
    },
    "azureCloudStorageAccount": {
      "type": "secureObject",
      "metadata": {
          "description": "The storage settings for the Azure Cloud plugin"
      }
    },
    "kibanaIp": {
      "type": "string",
      "metadata": {
          "description": "The public IP address for Kibana"
      }
    },
    "sharedStorageAccount": {
      "type": "secureObject",
      "metadata": {
        "description": "The shared storage settings"
      }
    },
    "elasticTags": {
      "type": "object",
      "defaultValue": {
        "provider": "648D2193-0CE0-4EFB-8A82-AF9792184FD9"
      },
      "metadata": {
        "description": "Unique identifiers to allow the Azure Infrastructure to understand the origin of resources deployed to Azure. You do not need to supply a value for this."
      }
    },
    "ExistingImageResourceGroupName": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Resource Group containing the existing image to use for VMs"
      }
    },
    "ExistingImageName": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Name of the Image to use for VMs"
      }
    }
  },
  "variables": {
    "quote": "'",
    "doublequote": "\"",
    "backslash": "\\",
    "escapedQuote": "[concat(variables('quote'), variables('doublequote'), variables('quote'), variables('doublequote'), variables('quote'))]",
    "nodesTemplateUrl": "[concat(parameters('templateBaseUrl'), 'partials/node-centoswoms-resources.json')]",
    "namespacePrefix": "[parameters('topologySettings').vmHostNamePrefix]",
    "kibanaDomainName": "[if(not(empty(parameters('esSettings').samlMetadataUri)),if(not(empty(parameters('esSettings').samlServiceProviderUri)),parameters('esSettings').samlServiceProviderUri,parameters('kibanaIp')),'')]",
    "loadBalancerIp": "[concat(if(equals(parameters('networkSettings').https, 'Yes'), 'https', 'http'), '://', parameters('topologySettings').vNetLoadBalancerIp, ':9200')]",
    "dataNodeShortOpts": {
      "No": "z",
      "Yes": ""
    },
    "dataNodeShortOpt": "[variables('dataNodeShortOpts')[parameters('topologySettings').dataNodesAreMasterEligible]]",
    "dedicatedMasterNodesShortOpts": {
      "No": "d",
      "Yes": ""
    },
    "dedicatedMasterNodesShortOpt": "[variables('dedicatedMasterNodesShortOpts')[parameters('topologySettings').dataNodesAreMasterEligible]]",
    "installAzureCloudPluginShortOpts": {
      "No": "",
      "Yes": "j"
    },
    "installAzureCloudPluginShortOpt": "[variables('installAzureCloudPluginShortOpts')[parameters('azureCloudStorageAccount').install]]",
    "azureCloudStorageName": "[if(equals(parameters('azureCloudStorageAccount').install, 'Yes'), if(empty(parameters('azureCloudStorageAccount').name), parameters('sharedStorageAccount').name, parameters('azureCloudStorageAccount').name), '')]",
    "azureCloudStorageKey": "[if(equals(parameters('azureCloudStorageAccount').install, 'Yes'), if(empty(parameters('azureCloudStorageAccount').key), parameters('sharedStorageAccount').key, parameters('azureCloudStorageAccount').key), '')]",
    "azureCloudStorageSuffix": "[if(equals(parameters('azureCloudStorageAccount').install, 'Yes'), if(empty(parameters('azureCloudStorageAccount').name), parameters('sharedStorageAccount').suffix, parameters('azureCloudStorageAccount').suffix), '')]",
    "installPluginsShortOpts": {
      "No": "",
      "Yes": "l"
    },
    "installPluginsShortOpt": "[variables('installPluginsShortOpts')[parameters('esSettings').installPlugins]]",
    "commonShortOpts": "[concat(variables('dedicatedMasterNodesShortOpt'),  variables('installPluginsShortOpt'), variables('installAzureCloudPluginShortOpt'), 'n ')]",
    "commonInstallParams": "[concat(variables('quote'), parameters('esSettings').clusterName, variables('quote'), ' -v ', variables('quote'), parameters('esSettings').version, variables('quote'), ' -m ', parameters('esSettings').heapSize,' -A ', variables('quote'), replace(parameters('esSettings').securityAdminPwd, variables('quote'), variables('escapedQuote')), variables('quote'), ' -R ', variables('quote'), replace(parameters('esSettings').securityReadPwd, variables('quote'), variables('escapedQuote')), variables('quote'), ' -K ', variables('quote'), replace(parameters('esSettings').securityKibanaPwd, variables('quote'), variables('escapedQuote')), variables('quote'), ' -S ', variables('quote'), replace(parameters('esSettings').securityLogstashPwd, variables('quote'), variables('escapedQuote')), variables('quote'), ' -F ', variables('quote'), replace(parameters('esSettings').securityBeatsPwd, variables('quote'), variables('escapedQuote')), variables('quote'), ' -B ', variables('quote'), replace(parameters('esSettings').securityBootstrapPwd, variables('quote'), variables('escapedQuote')), variables('quote'), ' -Z ', parameters('topologySettings').vmDataNodeCount,' -p ', variables('quote'), variables('namespacePrefix'), variables('quote'), ' -a ', variables('quote'), variables('azureCloudStorageName'), variables('quote'), ' -k ', variables('quote'), variables('azureCloudStorageKey'), variables('quote'), ' -E ', variables('quote'), variables('azureCloudStorageSuffix'), variables('quote'), ' -L ', variables('quote'), parameters('esSettings').installAdditionalPlugins, variables('quote'), ' -C ', variables('quote'), replace(replace(parameters('esSettings').yamlConfiguration, variables('quote'), variables('escapedQuote')), concat(variables('backslash'), variables('doublequote')), variables('doublequote')), variables('quote'), ' -D ', variables('quote'), parameters('topologySettings').vNetLoadBalancerIp, variables('quote'), ' -H ', variables('quote'), parameters('esSettings').httpCertBlob,variables('quote'), ' -G ', variables('quote'), replace(parameters('esSettings').httpCertPassword, variables('quote'), variables('escapedQuote')), variables('quote'), ' -V ', variables('quote'), parameters('esSettings').httpCaCertBlob, variables('quote'), ' -J ', variables('quote'), replace(parameters('esSettings').httpCaCertPassword, variables('quote'), variables('escapedQuote')), variables('quote'), ' -T ', variables('quote'), parameters('esSettings').transportCaCertBlob, variables('quote'), ' -W ', variables('quote'), replace(parameters('esSettings').transportCaCertPassword, variables('quote'), variables('escapedQuote')), variables('quote'), ' -N ', variables('quote'), replace(parameters('esSettings').transportCertPassword, variables('quote'), variables('escapedQuote')), variables('quote'), ' -O ', variables('quote'), parameters('esSettings').samlMetadataUri, variables('quote'), ' -P ', variables('quote'), variables('kibanaDomainName'), variables('quote'), ' -s ', variables('NameSynonymsURL'))]",
    "centosScripts": [
      "[concat(parameters('templateBaseUrl'), 'scripts/elasticsearch-install-centos-wam-httpd.sh')]",
      "[concat(parameters('templateBaseUrl'), 'scripts/kibana-install-centos-wam-httpd.sh')]",
      "[concat(parameters('templateBaseUrl'), 'scripts/logstash-install-centos.sh')]",
      "[concat(parameters('templateBaseUrl'), 'scripts/vm-disk-utils-0.1.sh')]",
      "[concat(parameters('templateBaseUrl'), 'scripts/java-install-centos.sh')]",
      "[concat(parameters('templateBaseUrl'), 'scripts/jumpbox-centos-wam.sh')]",
      "[concat(parameters('templateBaseUrl'), 'scripts/install-trend-agent.sh')]",
      "[concat(parameters('templateBaseUrl'), 'scripts/install-nessus-agent.sh')]",
      "[concat(parameters('templateBaseUrl'), 'scripts/set-static-dns.sh')]",
      "[concat(parameters('templateBaseUrl'), 'scripts/clientnodecertauth.sh')]",
      "[concat(parameters('templateBaseUrl'), 'scripts/httpdrevproxyselfsigned.sh')]",
      "[concat(parameters('templateBaseUrl'), 'scripts/kibananodeldapsauth.sh')]"
    ],
    "centosSettings": {
      "imageReference": {
        "id": "[concat(resourceId(parameters('ExistingImageResourceGroupName'), 'Microsoft.Compute/images/', parameters('ExistingImageName')))]"
      },
      "managementPort": 22,
      "extensionSettings": {
        "master": {
          "publisher": "Microsoft.Azure.Extensions",
          "type": "CustomScript",
          "typeHandlerVersion": "2.0",
          "autoUpgradeMinorVersion": true,
          "settings": {
            "fileUris": "[variables('centosScripts')]"
          },
          "protectedSettings": {
            "commandToExecute": "[concat('#!/bin/bash\n\nyum -y install wget', variables('installTrendParamValue'), variables('installNessusParamValue'), ' && ', variables('adjustSetStaticDNSScript'), ' && ', variables('CustESWAMPrep'), ' && bash elasticsearch-install-centos-wam-httpd.sh -x', variables('commonShortOpts'), variables('commonInstallParams'))]"
          }
        },
        "client": {
          "publisher": "Microsoft.Azure.Extensions",
          "type": "CustomScript",
          "typeHandlerVersion": "2.0",
          "autoUpgradeMinorVersion": true,
          "settings": {
            "fileUris": "[variables('centosScripts')]"
          },
          "protectedSettings": {
            "commandToExecute": "[concat('#!/bin/bash\n\nyum -y install wget', variables('installTrendParamValue'), variables('installNessusParamValue'), ' && ', variables('adjustSetStaticDNSScript'), ' && ', variables('CustESWAMPrep'), ' && bash elasticsearch-install-centos-wam-httpd.sh -y', variables('commonShortOpts'), variables('commonInstallParams'))]"
          }
        },
        "data": {
          "publisher": "Microsoft.Azure.Extensions",
          "type": "CustomScript",
          "typeHandlerVersion": "2.0",
          "autoUpgradeMinorVersion": true,
          "settings": {
            "fileUris": "[variables('centosScripts')]"
          },
          "protectedSettings": {
            "commandToExecute": "[concat('#!/bin/bash\n\nyum -y install wget', variables('installTrendParamValue'), variables('installNessusParamValue'), ' && ', variables('adjustSetStaticDNSScript'), ' && ', variables('CustESWAMPrep'), ' && bash elasticsearch-install-centos-wam-httpd.sh -', variables('dataNodeShortOpt'), variables('commonShortOpts'), variables('commonInstallParams'))]"
          }
        },
        "kibana": {
          "publisher": "Microsoft.Azure.Extensions",
          "type": "CustomScript",
          "typeHandlerVersion": "2.0",
          "autoUpgradeMinorVersion": true,
          "settings": {
            "fileUris": "[variables('centosScripts')]"
          },
          "protectedSettings": {
            "commandToExecute": "[concat('#!/bin/bash\n\nyum -y install wget', variables('installTrendParamValue'), variables('installNessusParamValue'), ' && ', variables('adjustSetStaticDNSScript'), ' && ', variables('CustKibWAMPrep'), ' && bash kibana-install-centos-wam-httpd.sh -', variables('installPluginsShortOpt'), 'n ', variables('quote'), parameters('esSettings').clusterName, variables('quote'), ' -v ', variables('quote'), parameters('esSettings').version, variables('quote'), ' -u ', variables('quote'), variables('loadBalancerIp') ,variables('quote'), ' -S ', variables('quote'), replace(parameters('esSettings').securityKibanaPwd, variables('quote'), variables('escapedQuote')), variables('quote'), ' -C ', variables('quote'), parameters('topologySettings').kibanaCertBlob, variables('quote'), ' -K ', variables('quote'), parameters('topologySettings').kibanaKeyBlob, variables('quote'), ' -P ', variables('quote'), replace(parameters('topologySettings').kibanaKeyPassphrase, variables('quote'), variables('escapedQuote')), variables('quote'), ' -Y ', variables('quote'), replace(replace(parameters('topologySettings').kibanaYaml, variables('quote'), variables('escapedQuote')), concat(variables('backslash'), variables('doublequote')), variables('doublequote')), variables('quote'), ' -H ', variables('quote'), parameters('esSettings').httpCertBlob, variables('quote'), ' -G ', variables('quote'), replace(parameters('esSettings').httpCertPassword, variables('quote'), variables('escapedQuote')), variables('quote'), ' -V ', variables('quote'), parameters('esSettings').httpCaCertBlob,variables('quote'), ' -J ', variables('quote'), replace(parameters('esSettings').httpCaCertPassword, variables('quote'), variables('escapedQuote')), variables('quote'), ' -U ', variables('quote'), variables('kibanaDomainName'), variables('quote'), ' -a', ' -c ', variables('KibLDAPScertURL'), ' -e ', variables('KibEnvURL'), ' -g ', variables('quote'), parameters('commonVmSettings').Kibanahttpd.KibanaLDAPGroupDN, variables('quote'))]"
          }
        },
        "logstash": {
          "publisher": "Microsoft.Azure.Extensions",
          "type": "CustomScript",
          "typeHandlerVersion": "2.0",
          "autoUpgradeMinorVersion": true,
          "settings": {
            "fileUris": "[variables('centosScripts')]"
          },
          "protectedSettings": {
            "commandToExecute": "[concat('#!/bin/bash\n\nyum -y install wget', variables('installTrendParamValue'), variables('installNessusParamValue'), ' && ', variables('adjustSetStaticDNSScript'), ' && ', variables('CustlinwatchWAMPrep'), ' && bash logstash-install-centos.sh -', variables('installPluginsShortOpt'), 'v ', variables('quote'), parameters('esSettings').version, variables('quote'), ' -m ', parameters('topologySettings').logstashHeapSize, ' -u ', variables('quote'), variables('loadBalancerIp'), variables('quote'), ' -S ', variables('quote'), replace(parameters('esSettings').securityLogstashPwd, variables('quote'), variables('escapedQuote')), variables('quote'), ' -L ', variables('quote'), parameters('topologySettings').logstashPlugins, variables('quote'), ' -c ', variables('quote'), parameters('topologySettings').logstashConf, variables('quote'), ' -K ', variables('quote'), replace(parameters('topologySettings').logstashKeystorePwd, variables('quote'), variables('escapedQuote')), variables('quote'), ' -Y ', variables('quote'), replace(replace(parameters('topologySettings').logstashYaml, variables('quote'), variables('escapedQuote')), concat(variables('backslash'), variables('doublequote')), variables('doublequote')), variables('quote'), ' -H ', variables('quote'), parameters('esSettings').httpCertBlob, variables('quote'), ' -G ', variables('quote'), replace(parameters('esSettings').httpCertPassword, variables('quote'), variables('escapedQuote')), variables('quote'), ' -V ', variables('quote'), parameters('esSettings').httpCaCertBlob, variables('quote'), ' -J ', variables('quote'), replace(parameters('esSettings').httpCaCertPassword, variables('quote'), variables('escapedQuote')), variables('quote'))]"
          }
        },
        "jumpbox": {
          "publisher": "Microsoft.Azure.Extensions",
          "type": "CustomScript",
          "typeHandlerVersion": "2.0",
          "autoUpgradeMinorVersion": true,
          "settings": {
            "fileUris": "[variables('centosScripts')]"
          },
          "protectedSettings": {
            "commandToExecute": "[concat('#!/bin/bash\n\nyum -y install wget', variables('installTrendParamValue'), variables('installNessusParamValue'), ' && ', variables('adjustSetStaticDNSScript'), ' && ', variables('CustlinwatchWAMPrep'), ' && bash jumpbox-centos-wam.sh')]"
          }
        },
        "oms": {
          "publisher": "Microsoft.EnterpriseCloud.Monitoring",
          "type": "OmsAgentForLinux",
          "typeHandlerVersion": "1.8",
          "autoUpgradeMinorVersion": true,
          "settings": {
            "workspaceId": "[parameters('commonVmSettings').OMS.OMSWorkSpaceId]"
          },
          "protectedSettings": {
            "workspaceKey": "[parameters('commonVmSettings').OMS.OMSWorkSpaceKey]"
          }
        }
      }
    },
    "installTrendParam": {
      "yes": "[concat(' && bash install-trend-agent.sh -U ', variables('quote'), parameters('commonVmSettings').Trend.TrendRPMURL, variables('quote'), ' -H ', variables('quote'), parameters('commonVmSettings').Trend.TrendMgrHostname, variables('quote'), ' -p ', variables('quote'), parameters('commonVmSettings').Trend.TrendPolicyID, variables('quote'))]",
      "no": ""
    },
    "installNessusParam": {
      "yes": "[concat(' && bash install-nessus-agent.sh -U ', variables('quote'), parameters('commonVmSettings').Nessus.NessusRPMURL, parameters('commonVmSettings').Nessus.NessusRPMURLSharedAccessSignature, variables('quote'), ' -H ', variables('quote'), parameters('commonVmSettings').Nessus.NessusMgrHostname, variables('quote'), ' -K ', variables('quote'), parameters('commonVmSettings').Nessus.NessusMgrKey, variables('quote'), ' -G ', variables('quote'), parameters('commonVmSettings').Nessus.NessusGroups, variables('quote'))]",
      "no": ""
    },
    "installTrendParamValue": "[variables('installTrendParam')[parameters('commonVmSettings').Trend.installTrendYN]]",
    "installNessusParamValue": "[variables('installNessusParam')[parameters('commonVmSettings').Nessus.installNessusYN]]",
    "Trend": "[concat('bash install-trend-agent.sh -U ', variables('quote'), parameters('commonVmSettings').Trend.TrendRPMURL, variables('quote'), ' -H ', variables('quote'), parameters('commonVmSettings').Trend.TrendMgrHostname, variables('quote'), ' -p ', variables('quote'), parameters('commonVmSettings').Trend.TrendPolicyID, variables('quote'))]",
    "Nessus": "[concat('bash install-nessus-agent.sh -U ', variables('quote'), parameters('commonVmSettings').Nessus.NessusRPMURL, parameters('commonVmSettings').Nessus.NessusRPMURLSharedAccessSignature, variables('quote'), ' -H ', variables('quote'), parameters('commonVmSettings').Nessus.NessusMgrHostname, variables('quote'), ' -K ', variables('quote'), parameters('commonVmSettings').Nessus.NessusMgrKey, variables('quote'), ' -G ', variables('quote'), parameters('commonVmSettings').Nessus.NessusGroups, variables('quote'))]",
    "CustESWAMPrep": "[concat('yum -y install httpd && service firewalld start && firewall-cmd --zone=public --add-port=80/tcp && service httpd start && service httpd start && wget ', variables('quote'), parameters('commonVmSettings').CustomWAM.WAMCustomSaltURL, parameters('commonVmSettings').CustomWAM.WAMCustomSaltURLSharedAccessSignature, variables('quote'), ' -O /var/www/html/salt-content.zip && wget ', variables('quote'), parameters('commonVmSettings').CustomWAM.WAMConfURL, parameters('commonVmSettings').CustomWAM.WAMConfURLSharedAccessSignature, variables('quote'), ' -O /root/config.yaml && sed -i \"s|-config=.*|-config=/root/config.yaml \\&\\& /opt/pbis/bin/update-dns|\" elasticsearch-install-centos-wam-httpd.sh && sed -i \"s|pip install --upgrade watchmaker*|pip install --upgrade watchmaker==', parameters('commonVmSettings').CustomWAM.pubwatchmakerpinnedversion, '|\" elasticsearch-install-centos-wam-httpd.sh')]",
    "CustKibWAMPrep": "[concat('yum -y install httpd && service firewalld start && firewall-cmd --zone=public --add-port=80/tcp && service httpd start && service httpd start && wget ', variables('quote'), parameters('commonVmSettings').CustomWAM.WAMCustomSaltURL, parameters('commonVmSettings').CustomWAM.WAMCustomSaltURLSharedAccessSignature, variables('quote'), ' -O /var/www/html/salt-content.zip && wget ', variables('quote'), parameters('commonVmSettings').CustomWAM.WAMConfURL, parameters('commonVmSettings').CustomWAM.WAMConfURLSharedAccessSignature, variables('quote'), ' -O /root/config.yaml && sed -i \"s|-config=.*|-config=/root/config.yaml \\&\\& /opt/pbis/bin/update-dns|\" kibana-install-centos-wam-httpd.sh && sed -i \"s|pip install --upgrade watchmaker*|pip install --upgrade watchmaker==', parameters('commonVmSettings').CustomWAM.pubwatchmakerpinnedversion, '|\" kibana-install-centos-wam-httpd.sh')]",
    "CustlinwatchWAMPrep": "[concat('yum -y install httpd && service firewalld start && firewall-cmd --zone=public --add-port=80/tcp && service httpd start && service httpd start && wget ', variables('quote'), parameters('commonVmSettings').CustomWAM.WAMCustomSaltURL, parameters('commonVmSettings').CustomWAM.WAMCustomSaltURLSharedAccessSignature, variables('quote'), ' -O /var/www/html/salt-content.zip && wget ', variables('quote'), parameters('commonVmSettings').CustomWAM.WAMConfURL, parameters('commonVmSettings').CustomWAM.WAMConfURLSharedAccessSignature, variables('quote'), ' -O /root/config.yaml && sed -i \"s|-config=.*|-config=/root/config.yaml \\&\\& /opt/pbis/bin/update-dns|\" jumpbox-centos-wam.sh')]",
    "adjustSetStaticDNSScript": "[concat('sed -i \"s|CHANGE_ME1|', parameters('commonVmSettings').CustomWAM.DomainDNSServerIP1, '|\" set-static-dns.sh', ' && sed -i \"s|CHANGE_ME2|', parameters('commonVmSettings').CustomWAM.DomainDNSServerIP2, '|\" set-static-dns.sh', ' && sed -i \"s|CHANGE_ME3|', parameters('commonVmSettings').CustomWAM.DomainDNSdomainsuffix, '|\" set-static-dns.sh')]",
    "KibLDAPScertURL": "[concat(variables('quote'), parameters('commonVmSettings').Kibanahttpd.KibanaLDAPSCertURL, parameters('commonVmSettings').Kibanahttpd.KibanaLDAPSCertURLSharedAccessSignature, variables('quote'))]",
    "KibEnvURL": "[concat(variables('quote'), parameters('commonVmSettings').Kibanahttpd.KibanaEnvContentURL, parameters('commonVmSettings').Kibanahttpd.KibanaEnvContentURLSharedAccessSignature, variables('quote'))]",
    "NameSynonymsURL": "[concat(variables('quote'), parameters('commonVmSettings').NameSynonyms.NameSynonymsURL, parameters('commonVmSettings').NameSynonyms.NameSynonymsURLSharedAccessSignature, variables('quote'))]"
  },
  "resources": [
    {
      "name": "elasticsearch-nodes",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2017-05-10",
      "dependsOn": [ ],
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[variables('nodesTemplateUrl')]",
          "contentVersion": "1.0.0.0"
        },
        "parameters": {
          "templateBaseUrl": {
            "value": "[parameters('templateBaseUrl')]"
          },
          "osSettings": {
            "value": "[variables('centosSettings')]"
          },
          "commonVmSettings": {
            "value": "[parameters('commonVmSettings')]"
          },
          "topologySettings": {
            "value": "[parameters('topologySettings')]"
          },
          "networkSettings": {
            "value": "[parameters('networkSettings')]"
          },
          "elasticTags": {
            "value": "[parameters('elasticTags')]"
          }
        }
      }
    }
  ],
  "outputs": {
    "jumpboxssh": {
      "value": "[reference('elasticsearch-nodes').outputs.jumpboxssh.value]",
      "type": "string"
    }
  }
}
